"""

City services in alerts dict:
    Street Cleaning
    Trash and recycling
    City building hours
    Parking meters
    Tow lot

Alerts for day are fetched from dictionary with city service as key


Example:

service_alerts['Street Cleaning'] = "Today is the third Tuesday of the month \\
and street cleaning is running on a normal schedule."


"""


from alexa_utilities import build_response, build_speechlet_response
from streetaddress import StreetAddressParser
from bs4 import BeautifulSoup
import requests
import alexa_constants
from enum import Enum
from enum import auto

class Services(Enum):
    STREET_CLEANING = 'Street Cleaning'
    TRASH = 'Trash and recycling'
    CITY_BUILDING_HOURS = 'City building hours'
    PARKING_METERS = 'Parking meters'
    TOW_LOT = 'Tow lot'
    

def get_alerts_info(intent, session):
"""
    Generate response object with information about citywide alerts
"""
    reprompt_text=None
    print("IN GET_ALERTS_INFO, SESSION: " + str(session))
    alerts = get_alerts()
    print("DICTIONARY WITH ALERTS SCRAPED FROM BOSTON.GOV: " + str(alerts))
    alerts = prune_normal_responses(service_alerts)
    print("DICTIONARY AFTER PRUNING: " + str(alerts))
    speech_output = alerts_to_speech_output(alerts)
    session_attributes = session.get('attributes', {})
    should_end_session = True   # leave this as True for right now
    return build_response(session_attributes, build_speechlet_response(
            intent['name'], speech_output, reprompt_text, should_end_session))


def alerts_to_speech_output(alerts):
"""
Return a string that contains all alerts or a message that city services are operating normally
"""
    if len(alerts) == 0:        # there are no alerts!
        return "There are no alerts. City services are operating on their normal schedule"
    else:
        all_alerts = ""
        for alert in alerts.values:
            all_alerts += alert
        return all_alerts
        

def prune_normal_responses(service_alerts):
"""

   Remove any text scraped from Boston.gov that aren't actually alerts.
   For example, parking meters, city building hours, and trash and 
   recycling are described "as on a normal schedule"

"""

    tow_lot_normal_message = "The tow lot is open from 7 a.m. - 11 p.m."
    tow_lot_normal_message += "Automated kiosks are available 24 hours a day,"
    tow_lot_normal_message += "seven days a week for vehicle releases."

    # for any defined service, if its alert is that it's running normally, 
    # remove it from the dictionary
    for service in Services:
        if str.find(service_alerts[service.value], "normal") == -1: # this is a leap of faith
            service_alerts.pop(service.value)                       # remove  
    if service_alerts[Services.TOW_LOT.value] == tow_lot_normal_message:
        service_alerts.pop(Services.TOW_LOT.value)
    return service_alerts

def get_alerts():
    url = urllib.request.urlopen("https://www.boston.gov") # get page
    soup = BeautifulSoup(url, "html.parser")               # feed into BS
    url.close()
    # parse, sanitize returned strings, place in dictionary
    service_alerts = {s.text.strip().replace(u'\xA0', u' ') : s_info.text.strip().replace(u'\xA0', u' ') \
                          for s in soup.find_all(class_ = "cds-t t--upper t--sans m-b300") \
                          for s_info in soup.find_all(class_ = "cds-d t--subinfo")}
    return service_alerts

if __name__ == "__main__":
    x = get_alerts()
    print(x)
